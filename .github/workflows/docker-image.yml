name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: dani251/tex-pdf-builder
  LATEST_FROM: full

jobs:
  # ==========================================
  # AMD64 Builds (bestehend)
  # ==========================================
  build-and-push:
    name: Build & Push (${{ matrix.variant }}) [amd64]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - variant: full
            tl_scheme: full
          - variant: slim
            tl_scheme: small

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # erzeugt Tags wie: dani251/tex-pdf-builder:full[,latest]  ODER :slim
      - name: Compute tags
        id: meta
        run: |
          TAGS="${IMAGE_NAME}:${{ matrix.variant }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ matrix.variant }}" = "${{ env.LATEST_FROM }}" ]; then
            TAGS="$TAGS,${IMAGE_NAME}:latest"
          fi
          echo "tags=$TAGS" >> "$GITHUB_OUTPUT"

      - name: Build & Push (${{ matrix.variant }}) [amd64]
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            TL_SCHEME=${{ matrix.tl_scheme }}
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}

  # ==========================================
  # NEU: ARM64 Build für FULL
  # erzeugt Tag: :full-arm64 (+ optional :latest-arm64)
  # ==========================================
  build-and-push-arm64-full:
    name: Build & Push full [arm64]
    runs-on: macos-26
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute tags (arm64 full)
        id: meta
        env:
          VARIANT: full
        run: |
          TAGS="${IMAGE_NAME}:${VARIANT}-arm64"
          # optional: latest-arm64 spiegeln, wenn main + LATEST_FROM=full
          if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${VARIANT}" = "${{ env.LATEST_FROM }}" ]; then
            TAGS="$TAGS,${IMAGE_NAME}:latest-arm64"
          fi
          echo "tags=$TAGS" >> "$GITHUB_OUTPUT"

      - name: Build & Push full [arm64]
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            TL_SCHEME=full
          push: true
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}

  # ==========================================
  # NEU: ARM64 Build für SLIM
  # erzeugt Tag: :slim-arm64
  # ==========================================
  build-and-push-arm64-slim:
    name: Build & Push slim [arm64]
    runs-on: macos-26
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute tags (arm64 slim)
        id: meta
        env:
          VARIANT: slim
        run: |
          TAGS="${IMAGE_NAME}:${VARIANT}-arm64"
          echo "tags=$TAGS" >> "$GITHUB_OUTPUT"

      - name: Build & Push slim [arm64]
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            TL_SCHEME=small
          push: true
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
