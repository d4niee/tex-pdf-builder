name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: dani251/tex-pdf-builder
  LATEST_FROM: full

jobs:
  build:
    name: Build (${{ matrix.variant }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - variant: full
            tl_scheme: full
          - variant: slim
            tl_scheme: small
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build (no push) - ${{ matrix.variant }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            TL_SCHEME=${{ matrix.tl_scheme }}
          push: false
          load: false
          # Layer-Cache f체r sp채tere Push-Stage
          cache-from: type=gha
          cache-to: type=gha,mode=max

  push:
    name: Push (${{ matrix.variant }})
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - variant: full
            tl_scheme: full
          - variant: slim
            tl_scheme: small
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push - ${{ matrix.variant }}
        id: buildpush
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            TL_SCHEME=${{ matrix.tl_scheme }}
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ env.IMAGE_NAME }}:${{ matrix.variant }}

      # :latest nur f체r die gew체nschte Variante und nur auf main
      - name: Tag & Push :latest (if applicable)
        if: github.ref == 'refs/heads/main' && matrix.variant == env.LATEST_FROM
        run: |
          docker buildx imagetools create \
            --tag ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:${{ matrix.variant }}
